<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title/><link>https://asher-ding.github.io/blog/</link><description>Recent content on</description><generator>Hugo -- 0.125.7</generator><language>zh-cn</language><lastBuildDate>Mon, 31 Mar 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://asher-ding.github.io/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>如何安装docker</title><link>https://asher-ding.github.io/blog/posts/%E5%AE%89%E8%A3%85docker/</link><pubDate>Mon, 31 Mar 2025 00:00:00 +0000</pubDate><guid>https://asher-ding.github.io/blog/posts/%E5%AE%89%E8%A3%85docker/</guid><description>安装docker 安装docker是为了运行Dify，管理Dify运行。
sudo apt install -y docker.io 安装docker-compose 安装docker-compose是为了管理Dify的运行。
sudo apt install -y docker-compose 2. docker-compose启动失败 如果在启动过程中，出现以下错误：
ERROR: Get &amp;#34;https://registry-1.docker.io/v2/&amp;#34;: net/http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers) 可按照以下步骤操作
ping registry-1.docker.io # 如果ping不通，可按照以下步骤操作 # 1. 获取可以ping通的镜像源 ping ustc.edu.cn # 配置docker镜像 sudo vi /etc/docker/daemon.json # 添加以下内容（vi编辑器，默认会使用vi编辑器，按i键进入编辑模式，按esc键退出编辑模式，按:wq键保存并退出） { &amp;#34;registry-mirrors&amp;#34;: [&amp;#34;https://docker.imgdb.de&amp;#34;,&amp;#34;https://docker.hlmirror.com&amp;#34;] } # 特别提醒： 以前很多常用的镜像源，现在都失效了，需要更换。 # 查看docker镜像 docker info | grep &amp;#34;Registry Mirrors&amp;#34; docker info | awk &amp;#39;/Registry Mirrors/{getline; print}&amp;#39; # 重启docker sudo systemctl daemon-reload sudo systemctl restart docker # 测试docker镜像 docker pull ustc.</description></item><item><title>如何部署dify</title><link>https://asher-ding.github.io/blog/posts/%E5%A6%82%E4%BD%95%E9%83%A8%E7%BD%B2dify/</link><pubDate>Mon, 31 Mar 2025 00:00:00 +0000</pubDate><guid>https://asher-ding.github.io/blog/posts/%E5%A6%82%E4%BD%95%E9%83%A8%E7%BD%B2dify/</guid><description>Demo 版 Dify 安装指南 环境 服务器 CPU: Intel(R) Core(TM) i5-4460 CPU @ 3.20GHz RAM: 7.6 GiB 硬盘: 1T 操作系统: Ubuntu 22.04.4 LTS 开始 安装git 安装git是为了下载Dify的源码，并便于后续的更新。
sudo apt install -y git 安装docker 安装docker是为了运行Dify，管理Dify运行。
sudo apt install -y docker.io 安装docker-compose 安装docker-compose是为了管理Dify的运行。
sudo apt install -y docker-compose 拉取Dify源码 cd /opt # 初始化git仓库 git init dify-docker cd dify-docker git remote add origin https://github.com/langgenius/dify.git # 启用 sparse-checkout git sparse-checkout init --cone # 设置只拉取docker内容 git sparse-checkout add docker # 拉取docker内容，并输出日志 git pull origin main -v 安装并启动Dify ls docker # 进入docker目录 cd docker # 复制配置文件 cp .</description></item><item><title>如何部署飞书机器人</title><link>https://asher-ding.github.io/blog/posts/%E9%A3%9E%E4%B9%A6%E6%9C%BA%E5%99%A8%E4%BA%BA/</link><pubDate>Mon, 31 Mar 2025 00:00:00 +0000</pubDate><guid>https://asher-ding.github.io/blog/posts/%E9%A3%9E%E4%B9%A6%E6%9C%BA%E5%99%A8%E4%BA%BA/</guid><description>部署飞书机器人 步骤概览 配置Dify工作流 配置飞书机器人 配置LangBot，添加dify工作流，添加飞书机器人 Feishu Bot ---&amp;gt; LangBot ---&amp;gt; Dify 配置Dify工作流 如何部署dify
配置飞书机器人 https://open.feishu.cn/app
配置LangBot GitHub：https://github.com/RockChinQ/LangBot Doc: https://docs.langbot.app/workshop/dify-service-api.html
部署 git clone https://github.com/RockChinQ/LangBot cd LangBot #启动docker docker compose up 配置LangBot 接入dify 在 LangBot 的 provider.json 文件中配置Dify.
&amp;#34;dify-service-api&amp;#34;: { &amp;#34;base-url&amp;#34;: &amp;#34;&amp;lt;你的dify服务地址&amp;gt;&amp;#34;, &amp;#34;app-type&amp;#34;: &amp;#34;chat&amp;#34;, &amp;#34;options&amp;#34;: { &amp;#34;convert-thinking-tips&amp;#34;: &amp;#34;original&amp;#34; }, &amp;#34;chat&amp;#34;: { &amp;#34;api-key&amp;#34;: &amp;#34;app-1234567890&amp;#34;, &amp;#34;timeout&amp;#34;: 120 }, &amp;#34;agent&amp;#34;: { &amp;#34;api-key&amp;#34;: &amp;#34;app-1234567890&amp;#34;, &amp;#34;timeout&amp;#34;: 120 }, &amp;#34;workflow&amp;#34;: { &amp;#34;api-key&amp;#34;: &amp;#34;app-1234567890&amp;#34;, &amp;#34;output-key&amp;#34;: &amp;#34;summary&amp;#34;, &amp;#34;timeout&amp;#34;: 120 } } 连接飞书机器人 { &amp;#34;adapter&amp;#34;: &amp;#34;lark&amp;#34;, &amp;#34;enable&amp;#34;: true, &amp;#34;app_id&amp;#34;: &amp;#34;&amp;lt;你飞书的app_id&amp;gt;&amp;#34;, &amp;#34;app_secret&amp;#34;: &amp;#34;&amp;lt;你飞书的app_secret&amp;gt;&amp;#34;, &amp;#34;bot_name&amp;#34;: &amp;#34;&amp;lt;你飞书的机器人名称&amp;gt;&amp;#34;, &amp;#34;enable-webhook&amp;#34;: false, &amp;#34;port&amp;#34;: 2285, &amp;#34;encrypt-key&amp;#34;: &amp;#34;&amp;lt;你飞书的encrypt-key&amp;gt;&amp;#34; }, 注意：bot_name必须与创建机器人时填写的机器人名称相同。确保enable为true。</description></item><item><title>如何使用Hugo</title><link>https://asher-ding.github.io/blog/posts/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hugo/</link><pubDate>Tue, 30 May 2023 16:11:22 +0800</pubDate><guid>https://asher-ding.github.io/blog/posts/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hugo/</guid><description>安装hugo 首先，去Hugo官网https://gohugo.io/下载适合您操作系统的最新版本。
brew install hugo
hugo version
然后，将Hugo解压缩到您想要的位置。例如，您可以将其解压缩到/usr/local/bin/，这将使Hugo可用于整个系统。
接下来，打开命令行终端并运行以下命令来检查Hugo是否已成功安装：
hugo version 如果一切正常，您应该会看到Hugo的版本信息。
新建站点 hugo new site /path/to 新建博文 hugo new posts/my-first-post.md
生成您的网站静态文件。在命令行中输入以下命令：
hugo 这将使用Hugo生成静态网页，并将它们存储在“public”目录中。
此时的目录
. ├── archetypes │ └── default.md ├── assets ├── config.toml ├── content │ └── 如何使用Hugo.md ├── data ├── layouts ├── public │ ├── categories │ │ └── index.xml │ ├── index.xml │ ├── sitemap.xml │ └── tags │ └── index.xml ├── resources │ └── _gen │ ├── assets │ └── images ├── static └── themes 配置github仓库 配置域名</description></item></channel></rss>